{"version":3,"sources":["HeaderContainer.tsx"],"names":["HeaderContainer","mode","scenes","layout","insets","state","getPreviousRoute","onContentHeightChange","styleInterpolator","style","focusedRoute","routes","index","slice","map","scene","i","self","length","options","descriptor","isFocused","key","route","previousRoute","previous","j","s","previousScene","nextScene","isHeaderStatic","headerShown","props","navigation","forStatic","forNoAnimation","e","height","nativeEvent","undefined","headerTransparent","styles","header","StyleSheet","create","position","top","left","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { NavigationContext } from 'react-navigation';\nimport { NavigationState as StackNavigationState } from 'react-navigation';\nimport { EdgeInsets } from 'react-native-safe-area-context';\n\nimport Header from './Header';\nimport {\n  forStatic,\n  forNoAnimation,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport {\n  Route,\n  Layout,\n  Scene,\n  StackHeaderStyleInterpolator,\n  StackNavigationProp,\n} from '../../types';\n\nexport type Props = {\n  mode: 'float' | 'screen';\n  layout: Layout;\n  insets: EdgeInsets;\n  scenes: (Scene<Route<string>> | undefined)[];\n  state: StackNavigationState;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  styleInterpolator: StackHeaderStyleInterpolator;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  insets,\n  state,\n  getPreviousRoute,\n  onContentHeightChange,\n  styleInterpolator,\n  style,\n}: Props) {\n  const focusedRoute = state.routes[state.index];\n\n  return (\n    <View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const { options } = scene.descriptor;\n        const isFocused = focusedRoute.key === scene.route.key;\n        const previousRoute = getPreviousRoute({ route: scene.route });\n\n        let previous;\n\n        if (previousRoute) {\n          // The previous scene will be shortly before the current scene in the array\n          // So loop back from current index to avoid looping over the full array\n          for (let j = i - 1; j >= 0; j--) {\n            const s = self[j];\n\n            if (s && s.route.key === previousRoute.key) {\n              previous = s;\n              break;\n            }\n          }\n        }\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousScene = self[i - 1];\n        const nextScene = self[i + 1];\n        const isHeaderStatic =\n          (previousScene &&\n            previousScene.descriptor.options.headerShown === false &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextScene) ||\n          (nextScene && nextScene.descriptor.options.headerShown === false);\n\n        const props = {\n          mode,\n          layout,\n          insets,\n          scene,\n          previous,\n          navigation:  scene.descriptor.navigation as StackNavigationProp,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? forStatic\n                : styleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <View\n              onLayout={\n                onContentHeightChange\n                  ? e =>\n                      onContentHeightChange({\n                        route: scene.route,\n                        height: e.nativeEvent.layout.height,\n                      })\n                  : undefined\n              }\n              pointerEvents={isFocused ? 'box-none' : 'none'}\n              accessibilityElementsHidden={!isFocused}\n              importantForAccessibility={\n                isFocused ? 'auto' : 'no-hide-descendants'\n              }\n              style={\n                mode === 'float' || options.headerTransparent\n                  ? styles.header\n                  : null\n              }\n            >\n              {options.headerShown !== false ? (\n                options.header !== undefined ? (\n                  options.header(props)\n                ) : (\n                  <Header {...props} />\n                )\n              ) : null}\n            </View>\n          </NavigationContext.Provider>\n        );\n      })}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]}